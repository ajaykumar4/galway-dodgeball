# Use the official Golang image to create a build artifact.
# This is based on Debian and sets the GOPATH to /go.
FROM golang:1.21-alpine AS builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source code into the container
COPY . .

# Build the Go app
# -ldflags="-w -s" strips debug information, resulting in a smaller binary
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o scraper .

# Start a new stage from scratch using a minimal base image
FROM alpine:latest

# Add necessary certificates and potentially timezone data
RUN apk --no-cache add ca-certificates tzdata

WORKDIR /app

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/scraper .

# Copy any other necessary files like .env if needed directly in the image
# COPY .env .

# Expose port if your scraper runs a server (unlikely for a pure scraper)
# EXPOSE 8080

# Command to run the executable
CMD ["./scraper"]
